
CubeMX 08 Running program in AXI SRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000108c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001324  08001324  00011324  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001334  08001334  00011334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001338  08001338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800133c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000010  0800134c  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00006000  20000030  0800134c  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d790  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001bc2  00000000  00000000  0002d7d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001687  00000000  00000000  0002f392  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000578  00000000  00000000  00030a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000650  00000000  00000000  00030f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000035f6  00000000  00000000  000315e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002dec  00000000  00000000  00034bde  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000379ca  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c6c  00000000  00000000  00037a48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800130c 	.word	0x0800130c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	0800130c 	.word	0x0800130c

080002d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002d8:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
{
 80002dc:	4605      	mov	r5, r0
  if((uint32_t)uwTickFreq == 0UL)
 80002de:	7818      	ldrb	r0, [r3, #0]
 80002e0:	b908      	cbnz	r0, 80002e6 <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
    }
  }
#else
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ea:	4a0c      	ldr	r2, [pc, #48]	; (800031c <HAL_InitTick+0x44>)
 80002ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80002f0:	6810      	ldr	r0, [r2, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 f8b7 	bl	8000468 <HAL_SYSTICK_Config>
 80002fa:	4604      	mov	r4, r0
 80002fc:	2800      	cmp	r0, #0
 80002fe:	d1f0      	bne.n	80002e2 <HAL_InitTick+0xa>
    return HAL_ERROR;
  }
#endif

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000300:	2d0f      	cmp	r5, #15
 8000302:	d8ee      	bhi.n	80002e2 <HAL_InitTick+0xa>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	4602      	mov	r2, r0
 8000306:	4629      	mov	r1, r5
 8000308:	f04f 30ff 	mov.w	r0, #4294967295
 800030c:	f000 f874 	bl	80003f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_InitTick+0x48>)
 8000312:	4620      	mov	r0, r4
 8000314:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000316:	bd38      	pop	{r3, r4, r5, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	20000008 	.word	0x20000008
 8000320:	20000004 	.word	0x20000004

08000324 <HAL_Init>:
{
 8000324:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
 8000328:	f000 f854 	bl	80003d4 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800032c:	f000 fc20 	bl	8000b70 <HAL_RCC_GetSysClockFreq>
 8000330:	490f      	ldr	r1, [pc, #60]	; (8000370 <HAL_Init+0x4c>)
 8000332:	4a10      	ldr	r2, [pc, #64]	; (8000374 <HAL_Init+0x50>)
 8000334:	698b      	ldr	r3, [r1, #24]
 8000336:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800033a:	5cd3      	ldrb	r3, [r2, r3]
 800033c:	f003 031f 	and.w	r3, r3, #31
 8000340:	40d8      	lsrs	r0, r3
 8000342:	4b0d      	ldr	r3, [pc, #52]	; (8000378 <HAL_Init+0x54>)
 8000344:	6018      	str	r0, [r3, #0]
  SystemD2Clock = (SystemCoreClock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000346:	698b      	ldr	r3, [r1, #24]
 8000348:	f003 030f 	and.w	r3, r3, #15
 800034c:	5cd3      	ldrb	r3, [r2, r3]
 800034e:	f003 031f 	and.w	r3, r3, #31
 8000352:	40d8      	lsrs	r0, r3
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <HAL_Init+0x58>)
 8000356:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000358:	2000      	movs	r0, #0
 800035a:	f7ff ffbd 	bl	80002d8 <HAL_InitTick>
 800035e:	4604      	mov	r4, r0
 8000360:	b918      	cbnz	r0, 800036a <HAL_Init+0x46>
  HAL_MspInit();
 8000362:	f000 ff25 	bl	80011b0 <HAL_MspInit>
}
 8000366:	4620      	mov	r0, r4
 8000368:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800036a:	2401      	movs	r4, #1
 800036c:	e7fb      	b.n	8000366 <HAL_Init+0x42>
 800036e:	bf00      	nop
 8000370:	58024400 	.word	0x58024400
 8000374:	08001324 	.word	0x08001324
 8000378:	20000008 	.word	0x20000008
 800037c:	2000000c 	.word	0x2000000c

08000380 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000380:	4a03      	ldr	r2, [pc, #12]	; (8000390 <HAL_IncTick+0x10>)
 8000382:	4b04      	ldr	r3, [pc, #16]	; (8000394 <HAL_IncTick+0x14>)
 8000384:	6811      	ldr	r1, [r2, #0]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	440b      	add	r3, r1
 800038a:	6013      	str	r3, [r2, #0]
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	2000002c 	.word	0x2000002c
 8000394:	20000000 	.word	0x20000000

08000398 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000398:	4b01      	ldr	r3, [pc, #4]	; (80003a0 <HAL_GetTick+0x8>)
 800039a:	6818      	ldr	r0, [r3, #0]
}
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	2000002c 	.word	0x2000002c

080003a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a4:	b538      	push	{r3, r4, r5, lr}
 80003a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003a8:	f7ff fff6 	bl	8000398 <HAL_GetTick>
 80003ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003ae:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80003b0:	bf1e      	ittt	ne
 80003b2:	4b04      	ldrne	r3, [pc, #16]	; (80003c4 <HAL_Delay+0x20>)
 80003b4:	781b      	ldrbne	r3, [r3, #0]
 80003b6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003b8:	f7ff ffee 	bl	8000398 <HAL_GetTick>
 80003bc:	1b40      	subs	r0, r0, r5
 80003be:	4284      	cmp	r4, r0
 80003c0:	d8fa      	bhi.n	80003b8 <HAL_Delay+0x14>
  {
  }
}
 80003c2:	bd38      	pop	{r3, r4, r5, pc}
 80003c4:	20000000 	.word	0x20000000

080003c8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003c8:	4b01      	ldr	r3, [pc, #4]	; (80003d0 <HAL_GetREVID+0x8>)
 80003ca:	6818      	ldr	r0, [r3, #0]
}
 80003cc:	0c00      	lsrs	r0, r0, #16
 80003ce:	4770      	bx	lr
 80003d0:	5c001000 	.word	0x5c001000

080003d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003d4:	4a07      	ldr	r2, [pc, #28]	; (80003f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80003e2:	041b      	lsls	r3, r3, #16
 80003e4:	0c1b      	lsrs	r3, r3, #16
 80003e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80003ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80003f0:	60d3      	str	r3, [r2, #12]
 80003f2:	4770      	bx	lr
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003f8:	4b19      	ldr	r3, [pc, #100]	; (8000460 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	68dc      	ldr	r4, [r3, #12]
 80003fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000402:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000406:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000408:	2b04      	cmp	r3, #4
 800040a:	bf28      	it	cs
 800040c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000410:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000414:	bf8c      	ite	hi
 8000416:	3c03      	subhi	r4, #3
 8000418:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800041a:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800041e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000420:	f103 33ff 	add.w	r3, r3, #4294967295
 8000424:	ea01 0103 	and.w	r1, r1, r3
 8000428:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800042c:	fa05 f404 	lsl.w	r4, r5, r4
 8000430:	f104 34ff 	add.w	r4, r4, #4294967295
 8000434:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000438:	ea42 0201 	orr.w	r2, r2, r1
 800043c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000440:	db07      	blt.n	8000452 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000442:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000446:	b2d2      	uxtb	r2, r2
 8000448:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800044c:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000450:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000452:	f000 000f 	and.w	r0, r0, #15
 8000456:	b2d2      	uxtb	r2, r2
 8000458:	4b02      	ldr	r3, [pc, #8]	; (8000464 <HAL_NVIC_SetPriority+0x6c>)
 800045a:	541a      	strb	r2, [r3, r0]
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop
 8000460:	e000ed00 	.word	0xe000ed00
 8000464:	e000ed14 	.word	0xe000ed14

08000468 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000468:	3801      	subs	r0, #1
 800046a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800046e:	d20a      	bcs.n	8000486 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000472:	21f0      	movs	r1, #240	; 0xf0
 8000474:	4a06      	ldr	r2, [pc, #24]	; (8000490 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000476:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000478:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800047a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800047e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000480:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000486:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	e000e010 	.word	0xe000e010
 8000490:	e000ed00 	.word	0xe000ed00

08000494 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000498:	680b      	ldr	r3, [r1, #0]
{
 800049a:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800049c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000660 <HAL_GPIO_Init+0x1cc>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80004a0:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80004a4:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00U;
 80004a6:	2300      	movs	r3, #0
        temp = EXTI_CurrentCPU->IMR1;
 80004a8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 8000664 <HAL_GPIO_Init+0x1d0>
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80004ac:	9a01      	ldr	r2, [sp, #4]
 80004ae:	40da      	lsrs	r2, r3
 80004b0:	d102      	bne.n	80004b8 <HAL_GPIO_Init+0x24>
      }
    }

    position++;
  }
}
 80004b2:	b005      	add	sp, #20
 80004b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80004b8:	2701      	movs	r7, #1
    if (iocurrent != 0x00U)
 80004ba:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80004bc:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 80004be:	ea12 0507 	ands.w	r5, r2, r7
 80004c2:	f000 80b7 	beq.w	8000634 <HAL_GPIO_Init+0x1a0>
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004c6:	684a      	ldr	r2, [r1, #4]
 80004c8:	f022 0610 	bic.w	r6, r2, #16
 80004cc:	2e02      	cmp	r6, #2
 80004ce:	d116      	bne.n	80004fe <HAL_GPIO_Init+0x6a>
        temp = GPIOx->AFR[position >> 3U];
 80004d0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80004d4:	f003 0b07 	and.w	fp, r3, #7
 80004d8:	f04f 0e0f 	mov.w	lr, #15
 80004dc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80004e0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80004e4:	f8da 4020 	ldr.w	r4, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80004e8:	fa0e fe0b 	lsl.w	lr, lr, fp
 80004ec:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80004f0:	690c      	ldr	r4, [r1, #16]
 80004f2:	fa04 f40b 	lsl.w	r4, r4, fp
 80004f6:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 80004fa:	f8ca 4020 	str.w	r4, [sl, #32]
 80004fe:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000502:	2403      	movs	r4, #3
      temp = GPIOx->MODER;
 8000504:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000508:	f002 0e03 	and.w	lr, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800050c:	fa04 f40a 	lsl.w	r4, r4, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000510:	3e01      	subs	r6, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000512:	fa0e fe0a 	lsl.w	lr, lr, sl
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000516:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000518:	2e01      	cmp	r6, #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800051a:	ea0b 0b04 	and.w	fp, fp, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800051e:	ea4e 0e0b 	orr.w	lr, lr, fp
      GPIOx->MODER = temp;
 8000522:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000526:	d810      	bhi.n	800054a <HAL_GPIO_Init+0xb6>
        temp = GPIOx->OSPEEDR;
 8000528:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800052a:	ea06 0b04 	and.w	fp, r6, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800052e:	68ce      	ldr	r6, [r1, #12]
 8000530:	fa06 fe0a 	lsl.w	lr, r6, sl
 8000534:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000538:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800053a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800053c:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000540:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000544:	409e      	lsls	r6, r3
 8000546:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 8000548:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800054a:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800054c:	4034      	ands	r4, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800054e:	688e      	ldr	r6, [r1, #8]
 8000550:	fa06 f60a 	lsl.w	r6, r6, sl
 8000554:	4334      	orrs	r4, r6
      GPIOx->PUPDR = temp;
 8000556:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000558:	00d4      	lsls	r4, r2, #3
 800055a:	d56b      	bpl.n	8000634 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055c:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000560:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000564:	f003 0703 	and.w	r7, r3, #3
 8000568:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800056c:	f044 0402 	orr.w	r4, r4, #2
 8000570:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000574:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000576:	f8c8 40f4 	str.w	r4, [r8, #244]	; 0xf4
 800057a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800057e:	f8d8 40f4 	ldr.w	r4, [r8, #244]	; 0xf4
 8000582:	f004 0402 	and.w	r4, r4, #2
 8000586:	9403      	str	r4, [sp, #12]
 8000588:	9c03      	ldr	r4, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800058a:	fa0e f407 	lsl.w	r4, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 800058e:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000592:	ea2a 0e04 	bic.w	lr, sl, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000596:	4c31      	ldr	r4, [pc, #196]	; (800065c <HAL_GPIO_Init+0x1c8>)
 8000598:	42a0      	cmp	r0, r4
 800059a:	d04d      	beq.n	8000638 <HAL_GPIO_Init+0x1a4>
 800059c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005a0:	42a0      	cmp	r0, r4
 80005a2:	d04b      	beq.n	800063c <HAL_GPIO_Init+0x1a8>
 80005a4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005a8:	42a0      	cmp	r0, r4
 80005aa:	d049      	beq.n	8000640 <HAL_GPIO_Init+0x1ac>
 80005ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005b0:	42a0      	cmp	r0, r4
 80005b2:	d047      	beq.n	8000644 <HAL_GPIO_Init+0x1b0>
 80005b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005b8:	42a0      	cmp	r0, r4
 80005ba:	d045      	beq.n	8000648 <HAL_GPIO_Init+0x1b4>
 80005bc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005c0:	42a0      	cmp	r0, r4
 80005c2:	d043      	beq.n	800064c <HAL_GPIO_Init+0x1b8>
 80005c4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005c8:	42a0      	cmp	r0, r4
 80005ca:	d041      	beq.n	8000650 <HAL_GPIO_Init+0x1bc>
 80005cc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005d0:	42a0      	cmp	r0, r4
 80005d2:	d03f      	beq.n	8000654 <HAL_GPIO_Init+0x1c0>
 80005d4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005d8:	42a0      	cmp	r0, r4
 80005da:	d03d      	beq.n	8000658 <HAL_GPIO_Init+0x1c4>
 80005dc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80005e0:	42a0      	cmp	r0, r4
 80005e2:	bf14      	ite	ne
 80005e4:	240a      	movne	r4, #10
 80005e6:	2409      	moveq	r4, #9
 80005e8:	40bc      	lsls	r4, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005ea:	03d7      	lsls	r7, r2, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005ec:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80005f0:	60b4      	str	r4, [r6, #8]
        temp &= ~(iocurrent);
 80005f2:	ea6f 0605 	mvn.w	r6, r5
        temp = EXTI_CurrentCPU->IMR1;
 80005f6:	f8dc 4000 	ldr.w	r4, [ip]
        temp &= ~(iocurrent);
 80005fa:	bf54      	ite	pl
 80005fc:	4034      	andpl	r4, r6
          temp |= iocurrent;
 80005fe:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000600:	0397      	lsls	r7, r2, #14
        EXTI_CurrentCPU->IMR1 = temp;
 8000602:	f8cc 4000 	str.w	r4, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 8000606:	f8dc 4004 	ldr.w	r4, [ip, #4]
        temp &= ~(iocurrent);
 800060a:	bf54      	ite	pl
 800060c:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800060e:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000610:	02d7      	lsls	r7, r2, #11
        EXTI->RTSR1 = temp;
 8000612:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 8000616:	f8cc 4004 	str.w	r4, [ip, #4]
        temp = EXTI->RTSR1;
 800061a:	f8d9 4000 	ldr.w	r4, [r9]
        temp &= ~(iocurrent);
 800061e:	bf54      	ite	pl
 8000620:	4034      	andpl	r4, r6
          temp |= iocurrent;
 8000622:	432c      	orrmi	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000624:	0292      	lsls	r2, r2, #10
        EXTI->RTSR1 = temp;
 8000626:	603c      	str	r4, [r7, #0]
        temp = EXTI->FTSR1;
 8000628:	687c      	ldr	r4, [r7, #4]
        temp &= ~(iocurrent);
 800062a:	bf54      	ite	pl
 800062c:	4034      	andpl	r4, r6
          temp |= iocurrent;
 800062e:	432c      	orrmi	r4, r5
        EXTI->FTSR1 = temp;
 8000630:	f8c9 4004 	str.w	r4, [r9, #4]
    position++;
 8000634:	3301      	adds	r3, #1
 8000636:	e739      	b.n	80004ac <HAL_GPIO_Init+0x18>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000638:	2400      	movs	r4, #0
 800063a:	e7d5      	b.n	80005e8 <HAL_GPIO_Init+0x154>
 800063c:	2401      	movs	r4, #1
 800063e:	e7d3      	b.n	80005e8 <HAL_GPIO_Init+0x154>
 8000640:	2402      	movs	r4, #2
 8000642:	e7d1      	b.n	80005e8 <HAL_GPIO_Init+0x154>
 8000644:	2403      	movs	r4, #3
 8000646:	e7cf      	b.n	80005e8 <HAL_GPIO_Init+0x154>
 8000648:	2404      	movs	r4, #4
 800064a:	e7cd      	b.n	80005e8 <HAL_GPIO_Init+0x154>
 800064c:	2405      	movs	r4, #5
 800064e:	e7cb      	b.n	80005e8 <HAL_GPIO_Init+0x154>
 8000650:	2406      	movs	r4, #6
 8000652:	e7c9      	b.n	80005e8 <HAL_GPIO_Init+0x154>
 8000654:	2407      	movs	r4, #7
 8000656:	e7c7      	b.n	80005e8 <HAL_GPIO_Init+0x154>
 8000658:	2408      	movs	r4, #8
 800065a:	e7c5      	b.n	80005e8 <HAL_GPIO_Init+0x154>
 800065c:	58020000 	.word	0x58020000
 8000660:	58024400 	.word	0x58024400
 8000664:	58000080 	.word	0x58000080

08000668 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000668:	b10a      	cbz	r2, 800066e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800066a:	6181      	str	r1, [r0, #24]
 800066c:	4770      	bx	lr
 800066e:	0409      	lsls	r1, r1, #16
 8000670:	e7fb      	b.n	800066a <HAL_GPIO_WritePin+0x2>

08000672 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000672:	6943      	ldr	r3, [r0, #20]
 8000674:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000678:	bf08      	it	eq
 800067a:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 800067c:	6181      	str	r1, [r0, #24]
 800067e:	4770      	bx	lr

08000680 <HAL_PWREx_ConfigSupply>:
  *            @arg PWR_EXTERNAL_SOURCE_SUPPLY          The LDO regulator is Bypassed.
  *                                                     The Vcore Power Domains are supplied from external source.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8000680:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  if(!__HAL_PWR_GET_FLAG(PWR_FLAG_SCUEN))
 8000682:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <HAL_PWREx_ConfigSupply+0x48>)
 8000684:	68da      	ldr	r2, [r3, #12]
 8000686:	f012 0f04 	tst.w	r2, #4
 800068a:	461a      	mov	r2, r3
 800068c:	d104      	bne.n	8000698 <HAL_PWREx_ConfigSupply+0x18>
  {
    if((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	f003 0307 	and.w	r3, r3, #7
 8000694:	4283      	cmp	r3, r0
 8000696:	d115      	bne.n	80006c4 <HAL_PWREx_ConfigSupply+0x44>
      return HAL_ERROR;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000698:	68d3      	ldr	r3, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick();

  /* Wait till voltage level flag is set */
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 800069a:	4c0b      	ldr	r4, [pc, #44]	; (80006c8 <HAL_PWREx_ConfigSupply+0x48>)
  MODIFY_REG(PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800069c:	f023 0307 	bic.w	r3, r3, #7
 80006a0:	4318      	orrs	r0, r3
 80006a2:	60d0      	str	r0, [r2, #12]
  tickstart = HAL_GetTick();
 80006a4:	f7ff fe78 	bl	8000398 <HAL_GetTick>
 80006a8:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ACTVOSRDY))
 80006aa:	6863      	ldr	r3, [r4, #4]
 80006ac:	049b      	lsls	r3, r3, #18
 80006ae:	d501      	bpl.n	80006b4 <HAL_PWREx_ConfigSupply+0x34>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 80006b0:	2000      	movs	r0, #0
 80006b2:	bd38      	pop	{r3, r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_FLAG_SETTING_DELAY_US)
 80006b4:	f7ff fe70 	bl	8000398 <HAL_GetTick>
 80006b8:	1b40      	subs	r0, r0, r5
 80006ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80006be:	d9f4      	bls.n	80006aa <HAL_PWREx_ConfigSupply+0x2a>
      return HAL_TIMEOUT;
 80006c0:	2003      	movs	r0, #3
}
 80006c2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80006c4:	2001      	movs	r0, #1
 80006c6:	bd38      	pop	{r3, r4, r5, pc}
 80006c8:	58024800 	.word	0x58024800

080006cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80006ce:	4605      	mov	r5, r0
 80006d0:	b908      	cbnz	r0, 80006d6 <HAL_RCC_OscConfig+0xa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80006d2:	2001      	movs	r0, #1
 80006d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006d6:	6803      	ldr	r3, [r0, #0]
 80006d8:	07d9      	lsls	r1, r3, #31
 80006da:	d45a      	bmi.n	8000792 <HAL_RCC_OscConfig+0xc6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80006dc:	682b      	ldr	r3, [r5, #0]
 80006de:	079a      	lsls	r2, r3, #30
 80006e0:	f100 80a7 	bmi.w	8000832 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80006e4:	682b      	ldr	r3, [r5, #0]
 80006e6:	06da      	lsls	r2, r3, #27
 80006e8:	d523      	bpl.n	8000732 <HAL_RCC_OscConfig+0x66>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80006ea:	4ba8      	ldr	r3, [pc, #672]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
 80006ec:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80006ee:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80006f0:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80006f4:	2a08      	cmp	r2, #8
 80006f6:	d007      	beq.n	8000708 <HAL_RCC_OscConfig+0x3c>
 80006f8:	2a18      	cmp	r2, #24
 80006fa:	f040 80f9 	bne.w	80008f0 <HAL_RCC_OscConfig+0x224>
 80006fe:	f001 0203 	and.w	r2, r1, #3
 8000702:	2a01      	cmp	r2, #1
 8000704:	f040 80f4 	bne.w	80008f0 <HAL_RCC_OscConfig+0x224>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	05db      	lsls	r3, r3, #23
 800070c:	d502      	bpl.n	8000714 <HAL_RCC_OscConfig+0x48>
 800070e:	69eb      	ldr	r3, [r5, #28]
 8000710:	2b80      	cmp	r3, #128	; 0x80
 8000712:	d1de      	bne.n	80006d2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000714:	f7ff fe58 	bl	80003c8 <HAL_GetREVID>
 8000718:	f241 0303 	movw	r3, #4099	; 0x1003
 800071c:	4a9b      	ldr	r2, [pc, #620]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
 800071e:	4298      	cmp	r0, r3
 8000720:	6a29      	ldr	r1, [r5, #32]
 8000722:	f200 80de 	bhi.w	80008e2 <HAL_RCC_OscConfig+0x216>
 8000726:	6853      	ldr	r3, [r2, #4]
 8000728:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800072c:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8000730:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000732:	682b      	ldr	r3, [r5, #0]
 8000734:	0719      	lsls	r1, r3, #28
 8000736:	f100 8114 	bmi.w	8000962 <HAL_RCC_OscConfig+0x296>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800073a:	682b      	ldr	r3, [r5, #0]
 800073c:	069a      	lsls	r2, r3, #26
 800073e:	f100 813a 	bmi.w	80009b6 <HAL_RCC_OscConfig+0x2ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000742:	682b      	ldr	r3, [r5, #0]
 8000744:	075c      	lsls	r4, r3, #29
 8000746:	d51e      	bpl.n	8000786 <HAL_RCC_OscConfig+0xba>
    PWR->CR1 |= PWR_CR1_DBP;
 8000748:	4c91      	ldr	r4, [pc, #580]	; (8000990 <HAL_RCC_OscConfig+0x2c4>)
 800074a:	6823      	ldr	r3, [r4, #0]
 800074c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000750:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8000752:	f7ff fe21 	bl	8000398 <HAL_GetTick>
 8000756:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	05da      	lsls	r2, r3, #23
 800075c:	f140 8150 	bpl.w	8000a00 <HAL_RCC_OscConfig+0x334>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000760:	68ab      	ldr	r3, [r5, #8]
 8000762:	4c8a      	ldr	r4, [pc, #552]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
 8000764:	2b01      	cmp	r3, #1
 8000766:	f040 8152 	bne.w	8000a0e <HAL_RCC_OscConfig+0x342>
 800076a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6723      	str	r3, [r4, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000772:	f241 3488 	movw	r4, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000776:	f7ff fe0f 	bl	8000398 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800077a:	4e84      	ldr	r6, [pc, #528]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
      tickstart = HAL_GetTick();
 800077c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800077e:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000780:	079b      	lsls	r3, r3, #30
 8000782:	f140 816a 	bpl.w	8000a5a <HAL_RCC_OscConfig+0x38e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000786:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000788:	2a00      	cmp	r2, #0
 800078a:	f040 816d 	bne.w	8000a68 <HAL_RCC_OscConfig+0x39c>
    }
  }
  return HAL_OK;
 800078e:	2000      	movs	r0, #0
 8000790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000792:	4b7e      	ldr	r3, [pc, #504]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
 8000794:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000796:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000798:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800079c:	2a10      	cmp	r2, #16
 800079e:	d005      	beq.n	80007ac <HAL_RCC_OscConfig+0xe0>
 80007a0:	2a18      	cmp	r2, #24
 80007a2:	d10a      	bne.n	80007ba <HAL_RCC_OscConfig+0xee>
 80007a4:	f001 0203 	and.w	r2, r1, #3
 80007a8:	2a02      	cmp	r2, #2
 80007aa:	d106      	bne.n	80007ba <HAL_RCC_OscConfig+0xee>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	039b      	lsls	r3, r3, #14
 80007b0:	d594      	bpl.n	80006dc <HAL_RCC_OscConfig+0x10>
 80007b2:	686b      	ldr	r3, [r5, #4]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d191      	bne.n	80006dc <HAL_RCC_OscConfig+0x10>
 80007b8:	e78b      	b.n	80006d2 <HAL_RCC_OscConfig+0x6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007ba:	686b      	ldr	r3, [r5, #4]
 80007bc:	4c73      	ldr	r4, [pc, #460]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
 80007be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80007c2:	d111      	bne.n	80007e8 <HAL_RCC_OscConfig+0x11c>
 80007c4:	6823      	ldr	r3, [r4, #0]
 80007c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007ca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007cc:	f7ff fde4 	bl	8000398 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80007d0:	4c6e      	ldr	r4, [pc, #440]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
        tickstart = HAL_GetTick();
 80007d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80007d4:	6823      	ldr	r3, [r4, #0]
 80007d6:	039f      	lsls	r7, r3, #14
 80007d8:	d480      	bmi.n	80006dc <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007da:	f7ff fddd 	bl	8000398 <HAL_GetTick>
 80007de:	1b80      	subs	r0, r0, r6
 80007e0:	2864      	cmp	r0, #100	; 0x64
 80007e2:	d9f7      	bls.n	80007d4 <HAL_RCC_OscConfig+0x108>
            return HAL_TIMEOUT;
 80007e4:	2003      	movs	r0, #3
 80007e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80007e8:	b9a3      	cbnz	r3, 8000814 <HAL_RCC_OscConfig+0x148>
 80007ea:	6823      	ldr	r3, [r4, #0]
 80007ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007f0:	6023      	str	r3, [r4, #0]
 80007f2:	6823      	ldr	r3, [r4, #0]
 80007f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80007fa:	f7ff fdcd 	bl	8000398 <HAL_GetTick>
 80007fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	0398      	lsls	r0, r3, #14
 8000804:	f57f af6a 	bpl.w	80006dc <HAL_RCC_OscConfig+0x10>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000808:	f7ff fdc6 	bl	8000398 <HAL_GetTick>
 800080c:	1b80      	subs	r0, r0, r6
 800080e:	2864      	cmp	r0, #100	; 0x64
 8000810:	d9f6      	bls.n	8000800 <HAL_RCC_OscConfig+0x134>
 8000812:	e7e7      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000818:	6823      	ldr	r3, [r4, #0]
 800081a:	d103      	bne.n	8000824 <HAL_RCC_OscConfig+0x158>
 800081c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000820:	6023      	str	r3, [r4, #0]
 8000822:	e7cf      	b.n	80007c4 <HAL_RCC_OscConfig+0xf8>
 8000824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000828:	6023      	str	r3, [r4, #0]
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000830:	e7cb      	b.n	80007ca <HAL_RCC_OscConfig+0xfe>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000832:	4b56      	ldr	r3, [pc, #344]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
 8000834:	68ea      	ldr	r2, [r5, #12]
 8000836:	6919      	ldr	r1, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000838:	6a98      	ldr	r0, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800083a:	f011 0138 	ands.w	r1, r1, #56	; 0x38
 800083e:	d003      	beq.n	8000848 <HAL_RCC_OscConfig+0x17c>
 8000840:	2918      	cmp	r1, #24
 8000842:	d12b      	bne.n	800089c <HAL_RCC_OscConfig+0x1d0>
 8000844:	0781      	lsls	r1, r0, #30
 8000846:	d129      	bne.n	800089c <HAL_RCC_OscConfig+0x1d0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	075b      	lsls	r3, r3, #29
 800084c:	d502      	bpl.n	8000854 <HAL_RCC_OscConfig+0x188>
 800084e:	2a00      	cmp	r2, #0
 8000850:	f43f af3f 	beq.w	80006d2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000854:	4c4d      	ldr	r4, [pc, #308]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	f023 0319 	bic.w	r3, r3, #25
 800085c:	4313      	orrs	r3, r2
 800085e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000860:	f7ff fd9a 	bl	8000398 <HAL_GetTick>
 8000864:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000866:	6823      	ldr	r3, [r4, #0]
 8000868:	075f      	lsls	r7, r3, #29
 800086a:	d511      	bpl.n	8000890 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800086c:	f7ff fdac 	bl	80003c8 <HAL_GetREVID>
 8000870:	f241 0303 	movw	r3, #4099	; 0x1003
 8000874:	692a      	ldr	r2, [r5, #16]
 8000876:	4298      	cmp	r0, r3
 8000878:	6863      	ldr	r3, [r4, #4]
 800087a:	bf95      	itete	ls
 800087c:	f423 337c 	bicls.w	r3, r3, #258048	; 0x3f000
 8000880:	f023 43fe 	bichi.w	r3, r3, #2130706432	; 0x7f000000
 8000884:	ea43 3302 	orrls.w	r3, r3, r2, lsl #12
 8000888:	ea43 6302 	orrhi.w	r3, r3, r2, lsl #24
 800088c:	6063      	str	r3, [r4, #4]
 800088e:	e729      	b.n	80006e4 <HAL_RCC_OscConfig+0x18>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000890:	f7ff fd82 	bl	8000398 <HAL_GetTick>
 8000894:	1b80      	subs	r0, r0, r6
 8000896:	2802      	cmp	r0, #2
 8000898:	d9e5      	bls.n	8000866 <HAL_RCC_OscConfig+0x19a>
 800089a:	e7a3      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
 800089c:	4c3b      	ldr	r4, [pc, #236]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800089e:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008a0:	b17a      	cbz	r2, 80008c2 <HAL_RCC_OscConfig+0x1f6>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80008a2:	f023 0319 	bic.w	r3, r3, #25
 80008a6:	4313      	orrs	r3, r2
 80008a8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008aa:	f7ff fd75 	bl	8000398 <HAL_GetTick>
 80008ae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	0758      	lsls	r0, r3, #29
 80008b4:	d4da      	bmi.n	800086c <HAL_RCC_OscConfig+0x1a0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008b6:	f7ff fd6f 	bl	8000398 <HAL_GetTick>
 80008ba:	1b80      	subs	r0, r0, r6
 80008bc:	2802      	cmp	r0, #2
 80008be:	d9f7      	bls.n	80008b0 <HAL_RCC_OscConfig+0x1e4>
 80008c0:	e790      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_HSI_DISABLE();
 80008c2:	f023 0301 	bic.w	r3, r3, #1
 80008c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008c8:	f7ff fd66 	bl	8000398 <HAL_GetTick>
 80008cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80008ce:	6823      	ldr	r3, [r4, #0]
 80008d0:	0759      	lsls	r1, r3, #29
 80008d2:	f57f af07 	bpl.w	80006e4 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008d6:	f7ff fd5f 	bl	8000398 <HAL_GetTick>
 80008da:	1b80      	subs	r0, r0, r6
 80008dc:	2802      	cmp	r0, #2
 80008de:	d9f6      	bls.n	80008ce <HAL_RCC_OscConfig+0x202>
 80008e0:	e780      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80008e2:	68d3      	ldr	r3, [r2, #12]
 80008e4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 80008e8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80008ec:	60d3      	str	r3, [r2, #12]
 80008ee:	e720      	b.n	8000732 <HAL_RCC_OscConfig+0x66>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80008f0:	69eb      	ldr	r3, [r5, #28]
 80008f2:	4c26      	ldr	r4, [pc, #152]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
 80008f4:	b323      	cbz	r3, 8000940 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_ENABLE();
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80008fe:	f7ff fd4b 	bl	8000398 <HAL_GetTick>
 8000902:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000904:	6823      	ldr	r3, [r4, #0]
 8000906:	05df      	lsls	r7, r3, #23
 8000908:	d50d      	bpl.n	8000926 <HAL_RCC_OscConfig+0x25a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800090a:	f7ff fd5d 	bl	80003c8 <HAL_GetREVID>
 800090e:	f241 0303 	movw	r3, #4099	; 0x1003
 8000912:	6a2a      	ldr	r2, [r5, #32]
 8000914:	4298      	cmp	r0, r3
 8000916:	d80c      	bhi.n	8000932 <HAL_RCC_OscConfig+0x266>
 8000918:	6863      	ldr	r3, [r4, #4]
 800091a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800091e:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8000922:	6063      	str	r3, [r4, #4]
 8000924:	e705      	b.n	8000732 <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000926:	f7ff fd37 	bl	8000398 <HAL_GetTick>
 800092a:	1b80      	subs	r0, r0, r6
 800092c:	2802      	cmp	r0, #2
 800092e:	d9e9      	bls.n	8000904 <HAL_RCC_OscConfig+0x238>
 8000930:	e758      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8000932:	68e3      	ldr	r3, [r4, #12]
 8000934:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8000938:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800093c:	60e3      	str	r3, [r4, #12]
 800093e:	e6f8      	b.n	8000732 <HAL_RCC_OscConfig+0x66>
        __HAL_RCC_CSI_DISABLE();
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000946:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000948:	f7ff fd26 	bl	8000398 <HAL_GetTick>
 800094c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	05d8      	lsls	r0, r3, #23
 8000952:	f57f aeee 	bpl.w	8000732 <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000956:	f7ff fd1f 	bl	8000398 <HAL_GetTick>
 800095a:	1b80      	subs	r0, r0, r6
 800095c:	2802      	cmp	r0, #2
 800095e:	d9f6      	bls.n	800094e <HAL_RCC_OscConfig+0x282>
 8000960:	e740      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000962:	696b      	ldr	r3, [r5, #20]
 8000964:	4c09      	ldr	r4, [pc, #36]	; (800098c <HAL_RCC_OscConfig+0x2c0>)
 8000966:	b1ab      	cbz	r3, 8000994 <HAL_RCC_OscConfig+0x2c8>
      __HAL_RCC_LSI_ENABLE();
 8000968:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000970:	f7ff fd12 	bl	8000398 <HAL_GetTick>
 8000974:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000976:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000978:	079b      	lsls	r3, r3, #30
 800097a:	f53f aede 	bmi.w	800073a <HAL_RCC_OscConfig+0x6e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800097e:	f7ff fd0b 	bl	8000398 <HAL_GetTick>
 8000982:	1b80      	subs	r0, r0, r6
 8000984:	2802      	cmp	r0, #2
 8000986:	d9f6      	bls.n	8000976 <HAL_RCC_OscConfig+0x2aa>
 8000988:	e72c      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
 800098a:	bf00      	nop
 800098c:	58024400 	.word	0x58024400
 8000990:	58024800 	.word	0x58024800
      __HAL_RCC_LSI_DISABLE();
 8000994:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8000996:	f023 0301 	bic.w	r3, r3, #1
 800099a:	6763      	str	r3, [r4, #116]	; 0x74
      tickstart = HAL_GetTick();
 800099c:	f7ff fcfc 	bl	8000398 <HAL_GetTick>
 80009a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80009a2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80009a4:	079f      	lsls	r7, r3, #30
 80009a6:	f57f aec8 	bpl.w	800073a <HAL_RCC_OscConfig+0x6e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009aa:	f7ff fcf5 	bl	8000398 <HAL_GetTick>
 80009ae:	1b80      	subs	r0, r0, r6
 80009b0:	2802      	cmp	r0, #2
 80009b2:	d9f6      	bls.n	80009a2 <HAL_RCC_OscConfig+0x2d6>
 80009b4:	e716      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80009b6:	69ab      	ldr	r3, [r5, #24]
 80009b8:	4c6c      	ldr	r4, [pc, #432]	; (8000b6c <HAL_RCC_OscConfig+0x4a0>)
 80009ba:	b183      	cbz	r3, 80009de <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_HSI48_ENABLE();
 80009bc:	6823      	ldr	r3, [r4, #0]
 80009be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009c2:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80009c4:	f7ff fce8 	bl	8000398 <HAL_GetTick>
 80009c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	0498      	lsls	r0, r3, #18
 80009ce:	f53f aeb8 	bmi.w	8000742 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80009d2:	f7ff fce1 	bl	8000398 <HAL_GetTick>
 80009d6:	1b80      	subs	r0, r0, r6
 80009d8:	2802      	cmp	r0, #2
 80009da:	d9f6      	bls.n	80009ca <HAL_RCC_OscConfig+0x2fe>
 80009dc:	e702      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
      __HAL_RCC_HSI48_DISABLE();
 80009de:	6823      	ldr	r3, [r4, #0]
 80009e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009e4:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 80009e6:	f7ff fcd7 	bl	8000398 <HAL_GetTick>
 80009ea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80009ec:	6823      	ldr	r3, [r4, #0]
 80009ee:	0499      	lsls	r1, r3, #18
 80009f0:	f57f aea7 	bpl.w	8000742 <HAL_RCC_OscConfig+0x76>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80009f4:	f7ff fcd0 	bl	8000398 <HAL_GetTick>
 80009f8:	1b80      	subs	r0, r0, r6
 80009fa:	2802      	cmp	r0, #2
 80009fc:	d9f6      	bls.n	80009ec <HAL_RCC_OscConfig+0x320>
 80009fe:	e6f1      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a00:	f7ff fcca 	bl	8000398 <HAL_GetTick>
 8000a04:	1b80      	subs	r0, r0, r6
 8000a06:	2864      	cmp	r0, #100	; 0x64
 8000a08:	f67f aea6 	bls.w	8000758 <HAL_RCC_OscConfig+0x8c>
 8000a0c:	e6ea      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a0e:	b9b3      	cbnz	r3, 8000a3e <HAL_RCC_OscConfig+0x372>
 8000a10:	6f23      	ldr	r3, [r4, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a12:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a16:	f023 0301 	bic.w	r3, r3, #1
 8000a1a:	6723      	str	r3, [r4, #112]	; 0x70
 8000a1c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000a1e:	f023 0304 	bic.w	r3, r3, #4
 8000a22:	6723      	str	r3, [r4, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a24:	f7ff fcb8 	bl	8000398 <HAL_GetTick>
 8000a28:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000a2a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000a2c:	0798      	lsls	r0, r3, #30
 8000a2e:	f57f aeaa 	bpl.w	8000786 <HAL_RCC_OscConfig+0xba>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a32:	f7ff fcb1 	bl	8000398 <HAL_GetTick>
 8000a36:	1b80      	subs	r0, r0, r6
 8000a38:	42b8      	cmp	r0, r7
 8000a3a:	d9f6      	bls.n	8000a2a <HAL_RCC_OscConfig+0x35e>
 8000a3c:	e6d2      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a3e:	2b05      	cmp	r3, #5
 8000a40:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000a42:	d103      	bne.n	8000a4c <HAL_RCC_OscConfig+0x380>
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	6723      	str	r3, [r4, #112]	; 0x70
 8000a4a:	e68e      	b.n	800076a <HAL_RCC_OscConfig+0x9e>
 8000a4c:	f023 0301 	bic.w	r3, r3, #1
 8000a50:	6723      	str	r3, [r4, #112]	; 0x70
 8000a52:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8000a54:	f023 0304 	bic.w	r3, r3, #4
 8000a58:	e68a      	b.n	8000770 <HAL_RCC_OscConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a5a:	f7ff fc9d 	bl	8000398 <HAL_GetTick>
 8000a5e:	1bc0      	subs	r0, r0, r7
 8000a60:	42a0      	cmp	r0, r4
 8000a62:	f67f ae8c 	bls.w	800077e <HAL_RCC_OscConfig+0xb2>
 8000a66:	e6bd      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8000a68:	4c40      	ldr	r4, [pc, #256]	; (8000b6c <HAL_RCC_OscConfig+0x4a0>)
 8000a6a:	6923      	ldr	r3, [r4, #16]
 8000a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000a70:	2b18      	cmp	r3, #24
 8000a72:	f43f ae2e 	beq.w	80006d2 <HAL_RCC_OscConfig+0x6>
        __HAL_RCC_PLL_DISABLE();
 8000a76:	6823      	ldr	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a78:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a7e:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a80:	d167      	bne.n	8000b52 <HAL_RCC_OscConfig+0x486>
        tickstart = HAL_GetTick();
 8000a82:	f7ff fc89 	bl	8000398 <HAL_GetTick>
 8000a86:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000a88:	6823      	ldr	r3, [r4, #0]
 8000a8a:	0199      	lsls	r1, r3, #6
 8000a8c:	d45b      	bmi.n	8000b46 <HAL_RCC_OscConfig+0x47a>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000a90:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000a92:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8000a96:	f023 0303 	bic.w	r3, r3, #3
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000a9e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8000aa2:	62a3      	str	r3, [r4, #40]	; 0x28
 8000aa4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000aa6:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	3a01      	subs	r2, #1
 8000aac:	025b      	lsls	r3, r3, #9
 8000aae:	0412      	lsls	r2, r2, #16
 8000ab0:	b29b      	uxth	r3, r3
 8000ab2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8000aba:	3a01      	subs	r2, #1
 8000abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8000ac4:	3a01      	subs	r2, #1
 8000ac6:	0612      	lsls	r2, r2, #24
 8000ac8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8000acc:	4313      	orrs	r3, r2
 8000ace:	6323      	str	r3, [r4, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8000ad0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ad2:	f023 0301 	bic.w	r3, r3, #1
 8000ad6:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8000ad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ada:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000adc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000ae0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ae4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ae8:	6363      	str	r3, [r4, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8000aea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000aec:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8000aee:	f023 030c 	bic.w	r3, r3, #12
 8000af2:	4313      	orrs	r3, r2
 8000af4:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8000af6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000af8:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8000afa:	f023 0302 	bic.w	r3, r3, #2
 8000afe:	4313      	orrs	r3, r2
 8000b00:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8000b02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b08:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000b0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8000b12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b18:	62e3      	str	r3, [r4, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8000b1a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b28:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000b2a:	f7ff fc35 	bl	8000398 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000b2e:	4c0f      	ldr	r4, [pc, #60]	; (8000b6c <HAL_RCC_OscConfig+0x4a0>)
        tickstart = HAL_GetTick();
 8000b30:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000b32:	6823      	ldr	r3, [r4, #0]
 8000b34:	019a      	lsls	r2, r3, #6
 8000b36:	f53f ae2a 	bmi.w	800078e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b3a:	f7ff fc2d 	bl	8000398 <HAL_GetTick>
 8000b3e:	1b40      	subs	r0, r0, r5
 8000b40:	2802      	cmp	r0, #2
 8000b42:	d9f6      	bls.n	8000b32 <HAL_RCC_OscConfig+0x466>
 8000b44:	e64e      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b46:	f7ff fc27 	bl	8000398 <HAL_GetTick>
 8000b4a:	1b80      	subs	r0, r0, r6
 8000b4c:	2802      	cmp	r0, #2
 8000b4e:	d99b      	bls.n	8000a88 <HAL_RCC_OscConfig+0x3bc>
 8000b50:	e648      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 8000b52:	f7ff fc21 	bl	8000398 <HAL_GetTick>
 8000b56:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000b58:	6823      	ldr	r3, [r4, #0]
 8000b5a:	019b      	lsls	r3, r3, #6
 8000b5c:	f57f ae17 	bpl.w	800078e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b60:	f7ff fc1a 	bl	8000398 <HAL_GetTick>
 8000b64:	1b40      	subs	r0, r0, r5
 8000b66:	2802      	cmp	r0, #2
 8000b68:	d9f6      	bls.n	8000b58 <HAL_RCC_OscConfig+0x48c>
 8000b6a:	e63b      	b.n	80007e4 <HAL_RCC_OscConfig+0x118>
 8000b6c:	58024400 	.word	0x58024400

08000b70 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b70:	4b48      	ldr	r3, [pc, #288]	; (8000c94 <HAL_RCC_GetSysClockFreq+0x124>)
 8000b72:	691a      	ldr	r2, [r3, #16]
 8000b74:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8000b78:	2a10      	cmp	r2, #16
{
 8000b7a:	b510      	push	{r4, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b7c:	d00e      	beq.n	8000b9c <HAL_RCC_GetSysClockFreq+0x2c>
 8000b7e:	2a18      	cmp	r2, #24
 8000b80:	d00e      	beq.n	8000ba0 <HAL_RCC_GetSysClockFreq+0x30>
 8000b82:	2a00      	cmp	r2, #0
 8000b84:	f040 8083 	bne.w	8000c8e <HAL_RCC_GetSysClockFreq+0x11e>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	4843      	ldr	r0, [pc, #268]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x128>)
 8000b8c:	f012 0f20 	tst.w	r2, #32
 8000b90:	d07e      	beq.n	8000c90 <HAL_RCC_GetSysClockFreq+0x120>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8000b98:	40d8      	lsrs	r0, r3
 8000b9a:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
    break;

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8000b9c:	483f      	ldr	r0, [pc, #252]	; (8000c9c <HAL_RCC_GetSysClockFreq+0x12c>)
 8000b9e:	bd10      	pop	{r4, pc}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000ba0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000ba2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8000ba6:	f3c0 1005 	ubfx	r0, r0, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000baa:	6b5c      	ldr	r4, [r3, #52]	; 0x34

    if (pllm != 0U)
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d06f      	beq.n	8000c90 <HAL_RCC_GetSysClockFreq+0x120>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000bb0:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8000bb4:	f002 0201 	and.w	r2, r2, #1
 8000bb8:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8000ca0 <HAL_RCC_GetSysClockFreq+0x130>
 8000bbc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000bc0:	4362      	muls	r2, r4
 8000bc2:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8000bc6:	f001 0203 	and.w	r2, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8000bca:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    {
      switch (pllsource)
 8000bce:	2a01      	cmp	r2, #1
 8000bd0:	ee07 0a90 	vmov	s15, r0
 8000bd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bd8:	d002      	beq.n	8000be0 <HAL_RCC_GetSysClockFreq+0x70>
 8000bda:	d30f      	bcc.n	8000bfc <HAL_RCC_GetSysClockFreq+0x8c>
 8000bdc:	2a02      	cmp	r2, #2
 8000bde:	d048      	beq.n	8000c72 <HAL_RCC_GetSysClockFreq+0x102>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bee:	eee6 7a05 	vfma.f32	s15, s12, s10
 8000bf2:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8000ca4 <HAL_RCC_GetSysClockFreq+0x134>
 8000bf6:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8000bfa:	e037      	b.n	8000c6c <HAL_RCC_GetSysClockFreq+0xfc>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	0692      	lsls	r2, r2, #26
 8000c00:	d527      	bpl.n	8000c52 <HAL_RCC_GetSysClockFreq+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000c02:	6819      	ldr	r1, [r3, #0]
 8000c04:	4a24      	ldr	r2, [pc, #144]	; (8000c98 <HAL_RCC_GetSysClockFreq+0x128>)
 8000c06:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8000c0c:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c12:	ee07 2a90 	vmov	s15, r2
 8000c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c1e:	ee07 3a90 	vmov	s15, r3
 8000c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c26:	eee6 7a05 	vfma.f32	s15, s12, s10
 8000c2a:	ee77 7aa5 	vadd.f32	s15, s15, s11
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000c30:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8000c3a:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8000c3c:	ee07 3a10 	vmov	s14, r3
 8000c40:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8000c44:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c48:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000c4c:	ee17 0a90 	vmov	r0, s15
 8000c50:	bd10      	pop	{r4, pc}
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c58:	ee07 3a90 	vmov	s15, r3
 8000c5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c60:	eee6 7a05 	vfma.f32	s15, s12, s10
 8000c64:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8000ca8 <HAL_RCC_GetSysClockFreq+0x138>
 8000c68:	ee77 7aa5 	vadd.f32	s15, s15, s11
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000c6c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8000c70:	e7dd      	b.n	8000c2e <HAL_RCC_GetSysClockFreq+0xbe>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8000c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000c78:	ee07 3a90 	vmov	s15, r3
 8000c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c80:	eee6 7a05 	vfma.f32	s15, s12, s10
 8000c84:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8000cac <HAL_RCC_GetSysClockFreq+0x13c>
 8000c88:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8000c8c:	e7ee      	b.n	8000c6c <HAL_RCC_GetSysClockFreq+0xfc>
    sysclockfreq = CSI_VALUE;
 8000c8e:	4808      	ldr	r0, [pc, #32]	; (8000cb0 <HAL_RCC_GetSysClockFreq+0x140>)
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 8000c90:	bd10      	pop	{r4, pc}
 8000c92:	bf00      	nop
 8000c94:	58024400 	.word	0x58024400
 8000c98:	03d09000 	.word	0x03d09000
 8000c9c:	007a1200 	.word	0x007a1200
 8000ca0:	39000000 	.word	0x39000000
 8000ca4:	4a742400 	.word	0x4a742400
 8000ca8:	4c742400 	.word	0x4c742400
 8000cac:	4af42400 	.word	0x4af42400
 8000cb0:	003d0900 	.word	0x003d0900

08000cb4 <HAL_RCC_ClockConfig>:
{
 8000cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cb8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000cba:	4604      	mov	r4, r0
 8000cbc:	b910      	cbnz	r0, 8000cc4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000cc4:	4a84      	ldr	r2, [pc, #528]	; (8000ed8 <HAL_RCC_ClockConfig+0x224>)
 8000cc6:	6813      	ldr	r3, [r2, #0]
 8000cc8:	f003 030f 	and.w	r3, r3, #15
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	f0c0 8089 	bcc.w	8000de4 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8000cd2:	6823      	ldr	r3, [r4, #0]
 8000cd4:	075f      	lsls	r7, r3, #29
 8000cd6:	f100 8091 	bmi.w	8000dfc <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cda:	071e      	lsls	r6, r3, #28
 8000cdc:	d50b      	bpl.n	8000cf6 <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8000cde:	497f      	ldr	r1, [pc, #508]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000ce0:	6966      	ldr	r6, [r4, #20]
 8000ce2:	69c8      	ldr	r0, [r1, #28]
 8000ce4:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000ce8:	4286      	cmp	r6, r0
 8000cea:	d904      	bls.n	8000cf6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8000cec:	69ca      	ldr	r2, [r1, #28]
 8000cee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000cf2:	4332      	orrs	r2, r6
 8000cf4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf6:	06d8      	lsls	r0, r3, #27
 8000cf8:	d50b      	bpl.n	8000d12 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8000cfa:	4978      	ldr	r1, [pc, #480]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000cfc:	69a6      	ldr	r6, [r4, #24]
 8000cfe:	69c8      	ldr	r0, [r1, #28]
 8000d00:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000d04:	4286      	cmp	r6, r0
 8000d06:	d904      	bls.n	8000d12 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8000d08:	69ca      	ldr	r2, [r1, #28]
 8000d0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000d0e:	4332      	orrs	r2, r6
 8000d10:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8000d12:	0699      	lsls	r1, r3, #26
 8000d14:	d50b      	bpl.n	8000d2e <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8000d16:	4971      	ldr	r1, [pc, #452]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000d18:	69e6      	ldr	r6, [r4, #28]
 8000d1a:	6a08      	ldr	r0, [r1, #32]
 8000d1c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000d20:	4286      	cmp	r6, r0
 8000d22:	d904      	bls.n	8000d2e <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8000d24:	6a0a      	ldr	r2, [r1, #32]
 8000d26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d2a:	4332      	orrs	r2, r6
 8000d2c:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d2e:	079a      	lsls	r2, r3, #30
 8000d30:	d50b      	bpl.n	8000d4a <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8000d32:	496a      	ldr	r1, [pc, #424]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000d34:	68e6      	ldr	r6, [r4, #12]
 8000d36:	6988      	ldr	r0, [r1, #24]
 8000d38:	f000 000f 	and.w	r0, r0, #15
 8000d3c:	4286      	cmp	r6, r0
 8000d3e:	d904      	bls.n	8000d4a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d40:	698a      	ldr	r2, [r1, #24]
 8000d42:	f022 020f 	bic.w	r2, r2, #15
 8000d46:	4332      	orrs	r2, r6
 8000d48:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d4a:	07df      	lsls	r7, r3, #31
 8000d4c:	d464      	bmi.n	8000e18 <HAL_RCC_ClockConfig+0x164>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d4e:	6823      	ldr	r3, [r4, #0]
 8000d50:	079e      	lsls	r6, r3, #30
 8000d52:	f100 8098 	bmi.w	8000e86 <HAL_RCC_ClockConfig+0x1d2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d56:	4960      	ldr	r1, [pc, #384]	; (8000ed8 <HAL_RCC_ClockConfig+0x224>)
 8000d58:	680a      	ldr	r2, [r1, #0]
 8000d5a:	f002 020f 	and.w	r2, r2, #15
 8000d5e:	4295      	cmp	r5, r2
 8000d60:	f0c0 809f 	bcc.w	8000ea2 <HAL_RCC_ClockConfig+0x1ee>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8000d64:	0758      	lsls	r0, r3, #29
 8000d66:	f100 80a8 	bmi.w	8000eba <HAL_RCC_ClockConfig+0x206>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d6a:	0719      	lsls	r1, r3, #28
 8000d6c:	d50b      	bpl.n	8000d86 <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8000d6e:	495b      	ldr	r1, [pc, #364]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000d70:	6965      	ldr	r5, [r4, #20]
 8000d72:	69c8      	ldr	r0, [r1, #28]
 8000d74:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000d78:	4285      	cmp	r5, r0
 8000d7a:	d204      	bcs.n	8000d86 <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8000d7c:	69ca      	ldr	r2, [r1, #28]
 8000d7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000d82:	432a      	orrs	r2, r5
 8000d84:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d86:	06da      	lsls	r2, r3, #27
 8000d88:	d50b      	bpl.n	8000da2 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8000d8a:	4954      	ldr	r1, [pc, #336]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000d8c:	69a5      	ldr	r5, [r4, #24]
 8000d8e:	69c8      	ldr	r0, [r1, #28]
 8000d90:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000d94:	4285      	cmp	r5, r0
 8000d96:	d204      	bcs.n	8000da2 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8000d98:	69ca      	ldr	r2, [r1, #28]
 8000d9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000d9e:	432a      	orrs	r2, r5
 8000da0:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8000da2:	069b      	lsls	r3, r3, #26
 8000da4:	d50b      	bpl.n	8000dbe <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8000da6:	4a4d      	ldr	r2, [pc, #308]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000da8:	69e0      	ldr	r0, [r4, #28]
 8000daa:	6a11      	ldr	r1, [r2, #32]
 8000dac:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8000db0:	4288      	cmp	r0, r1
 8000db2:	d204      	bcs.n	8000dbe <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8000db4:	6a13      	ldr	r3, [r2, #32]
 8000db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dba:	4303      	orrs	r3, r0
 8000dbc:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dbe:	f7ff fed7 	bl	8000b70 <HAL_RCC_GetSysClockFreq>
 8000dc2:	4b46      	ldr	r3, [pc, #280]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000dc4:	4a46      	ldr	r2, [pc, #280]	; (8000ee0 <HAL_RCC_ClockConfig+0x22c>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	f003 031f 	and.w	r3, r3, #31
 8000dd2:	40d8      	lsrs	r0, r3
 8000dd4:	4b43      	ldr	r3, [pc, #268]	; (8000ee4 <HAL_RCC_ClockConfig+0x230>)
 8000dd6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8000dd8:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <HAL_RCC_ClockConfig+0x234>)
}
 8000dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	f7ff ba7a 	b.w	80002d8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000de4:	6813      	ldr	r3, [r2, #0]
 8000de6:	f023 030f 	bic.w	r3, r3, #15
 8000dea:	430b      	orrs	r3, r1
 8000dec:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000dee:	6813      	ldr	r3, [r2, #0]
 8000df0:	f003 030f 	and.w	r3, r3, #15
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f47f af62 	bne.w	8000cbe <HAL_RCC_ClockConfig+0xa>
 8000dfa:	e76a      	b.n	8000cd2 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8000dfc:	4937      	ldr	r1, [pc, #220]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000dfe:	6926      	ldr	r6, [r4, #16]
 8000e00:	6988      	ldr	r0, [r1, #24]
 8000e02:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000e06:	4286      	cmp	r6, r0
 8000e08:	f67f af67 	bls.w	8000cda <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8000e0c:	698a      	ldr	r2, [r1, #24]
 8000e0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000e12:	4332      	orrs	r2, r6
 8000e14:	618a      	str	r2, [r1, #24]
 8000e16:	e760      	b.n	8000cda <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8000e18:	4b30      	ldr	r3, [pc, #192]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000e1a:	68a1      	ldr	r1, [r4, #8]
 8000e1c:	699a      	ldr	r2, [r3, #24]
 8000e1e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8000e22:	430a      	orrs	r2, r1
 8000e24:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e26:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e28:	681a      	ldr	r2, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e2a:	2902      	cmp	r1, #2
 8000e2c:	d11e      	bne.n	8000e6c <HAL_RCC_ClockConfig+0x1b8>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e2e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e32:	f43f af44 	beq.w	8000cbe <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000e36:	691a      	ldr	r2, [r3, #16]
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e38:	f241 3888 	movw	r8, #5000	; 0x1388
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e3c:	4e27      	ldr	r6, [pc, #156]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000e3e:	f022 0207 	bic.w	r2, r2, #7
 8000e42:	430a      	orrs	r2, r1
 8000e44:	611a      	str	r2, [r3, #16]
      tickstart = HAL_GetTick();
 8000e46:	f7ff faa7 	bl	8000398 <HAL_GetTick>
 8000e4a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e4c:	6933      	ldr	r3, [r6, #16]
 8000e4e:	6862      	ldr	r2, [r4, #4]
 8000e50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000e54:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8000e58:	f43f af79 	beq.w	8000d4e <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e5c:	f7ff fa9c 	bl	8000398 <HAL_GetTick>
 8000e60:	1bc0      	subs	r0, r0, r7
 8000e62:	4540      	cmp	r0, r8
 8000e64:	d9f2      	bls.n	8000e4c <HAL_RCC_ClockConfig+0x198>
            return HAL_TIMEOUT;
 8000e66:	2003      	movs	r0, #3
}
 8000e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e6c:	2903      	cmp	r1, #3
 8000e6e:	d102      	bne.n	8000e76 <HAL_RCC_ClockConfig+0x1c2>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000e70:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000e74:	e7dd      	b.n	8000e32 <HAL_RCC_ClockConfig+0x17e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8000e76:	2901      	cmp	r1, #1
 8000e78:	d102      	bne.n	8000e80 <HAL_RCC_ClockConfig+0x1cc>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000e7a:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000e7e:	e7d8      	b.n	8000e32 <HAL_RCC_ClockConfig+0x17e>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e80:	f012 0f04 	tst.w	r2, #4
 8000e84:	e7d5      	b.n	8000e32 <HAL_RCC_ClockConfig+0x17e>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8000e86:	4915      	ldr	r1, [pc, #84]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000e88:	68e6      	ldr	r6, [r4, #12]
 8000e8a:	6988      	ldr	r0, [r1, #24]
 8000e8c:	f000 000f 	and.w	r0, r0, #15
 8000e90:	4286      	cmp	r6, r0
 8000e92:	f4bf af60 	bcs.w	8000d56 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e96:	698a      	ldr	r2, [r1, #24]
 8000e98:	f022 020f 	bic.w	r2, r2, #15
 8000e9c:	4332      	orrs	r2, r6
 8000e9e:	618a      	str	r2, [r1, #24]
 8000ea0:	e759      	b.n	8000d56 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ea2:	680a      	ldr	r2, [r1, #0]
 8000ea4:	f022 020f 	bic.w	r2, r2, #15
 8000ea8:	432a      	orrs	r2, r5
 8000eaa:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000eac:	680a      	ldr	r2, [r1, #0]
 8000eae:	f002 020f 	and.w	r2, r2, #15
 8000eb2:	4295      	cmp	r5, r2
 8000eb4:	f47f af03 	bne.w	8000cbe <HAL_RCC_ClockConfig+0xa>
 8000eb8:	e754      	b.n	8000d64 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8000eba:	4908      	ldr	r1, [pc, #32]	; (8000edc <HAL_RCC_ClockConfig+0x228>)
 8000ebc:	6925      	ldr	r5, [r4, #16]
 8000ebe:	6988      	ldr	r0, [r1, #24]
 8000ec0:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8000ec4:	4285      	cmp	r5, r0
 8000ec6:	f4bf af50 	bcs.w	8000d6a <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8000eca:	698a      	ldr	r2, [r1, #24]
 8000ecc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000ed0:	432a      	orrs	r2, r5
 8000ed2:	618a      	str	r2, [r1, #24]
 8000ed4:	e749      	b.n	8000d6a <HAL_RCC_ClockConfig+0xb6>
 8000ed6:	bf00      	nop
 8000ed8:	52002000 	.word	0x52002000
 8000edc:	58024400 	.word	0x58024400
 8000ee0:	08001324 	.word	0x08001324
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000004 	.word	0x20000004

08000eec <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ef0:	b08c      	sub	sp, #48	; 0x30

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	2214      	movs	r2, #20
 8000ef4:	2100      	movs	r1, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ef6:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80010a4 <MX_GPIO_Init+0x1b8>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	a807      	add	r0, sp, #28

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000efc:	4e65      	ldr	r6, [pc, #404]	; (8001094 <MX_GPIO_Init+0x1a8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efe:	f000 f9fd 	bl	80012fc <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	4b65      	ldr	r3, [pc, #404]	; (8001098 <MX_GPIO_Init+0x1ac>)
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f04:	4640      	mov	r0, r8
 8000f06:	f44f 4181 	mov.w	r1, #16512	; 0x4080
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2400      	movs	r4, #0
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f10:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80010a8 <MX_GPIO_Init+0x1bc>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f14:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f18:	f042 0204 	orr.w	r2, r2, #4

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1e:	270b      	movs	r7, #11
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f28:	f002 0204 	and.w	r2, r2, #4
 8000f2c:	9201      	str	r2, [sp, #4]
 8000f2e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f34:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f38:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f40:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000f44:	9202      	str	r2, [sp, #8]
 8000f46:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f4c:	f042 0201 	orr.w	r2, r2, #1
 8000f50:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f58:	f002 0201 	and.w	r2, r2, #1
 8000f5c:	9203      	str	r2, [sp, #12]
 8000f5e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f64:	f042 0202 	orr.w	r2, r2, #2
 8000f68:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f70:	f002 0202 	and.w	r2, r2, #2
 8000f74:	9204      	str	r2, [sp, #16]
 8000f76:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f7c:	f042 0208 	orr.w	r2, r2, #8
 8000f80:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000f84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f88:	f002 0208 	and.w	r2, r2, #8
 8000f8c:	9205      	str	r2, [sp, #20]
 8000f8e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f98:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000f9c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fa6:	9306      	str	r3, [sp, #24]
 8000fa8:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000faa:	f7ff fb5d 	bl	8000668 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	2140      	movs	r1, #64	; 0x40
 8000fb4:	f7ff fb58 	bl	8000668 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <MX_GPIO_Init+0x1b0>)
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fba:	a907      	add	r1, sp, #28
 8000fbc:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fbe:	f8cd a01c 	str.w	sl, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fc2:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f7ff fa65 	bl	8000494 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fca:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fcc:	a907      	add	r1, sp, #28
 8000fce:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f5a9 6900 	sub.w	r9, r9, #2048	; 0x800
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000fd4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fdc:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f7ff fa59 	bl	8000494 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fe2:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	a907      	add	r1, sp, #28
 8000fe6:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fea:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff0:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff2:	f7ff fa4f 	bl	8000494 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	a907      	add	r1, sp, #28
 8000ff8:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ffa:	f8cd a01c 	str.w	sl, [sp, #28]

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001008:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800100a:	f7ff fa43 	bl	8000494 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800100e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	a907      	add	r1, sp, #28
 8001014:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800101a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f7ff fa38 	bl	8000494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001024:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001028:	a907      	add	r1, sp, #28
 800102a:	481d      	ldr	r0, [pc, #116]	; (80010a0 <MX_GPIO_Init+0x1b4>)
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800102c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800102e:	2307      	movs	r3, #7
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001032:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001034:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f7ff fa2c 	bl	8000494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800103c:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800103e:	a907      	add	r1, sp, #28
 8001040:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001042:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001046:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800104c:	f7ff fa22 	bl	8000494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001050:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001052:	a907      	add	r1, sp, #28
 8001054:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001056:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001058:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800105c:	f7ff fa1a 	bl	8000494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001060:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001064:	a907      	add	r1, sp, #28
 8001066:	4648      	mov	r0, r9
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800106a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800106c:	230a      	movs	r3, #10
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001070:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f7ff fa0e 	bl	8000494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001078:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800107c:	a907      	add	r1, sp, #28
 800107e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001080:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001082:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001088:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800108a:	f7ff fa03 	bl	8000494 <HAL_GPIO_Init>

}
 800108e:	b00c      	add	sp, #48	; 0x30
 8001090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001094:	58021800 	.word	0x58021800
 8001098:	58024400 	.word	0x58024400
 800109c:	11110000 	.word	0x11110000
 80010a0:	58020c00 	.word	0x58020c00
 80010a4:	58020400 	.word	0x58020400
 80010a8:	58020800 	.word	0x58020800

080010ac <ToggleLED>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void ToggleLED()
{
  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80010ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010b0:	4801      	ldr	r0, [pc, #4]	; (80010b8 <ToggleLED+0xc>)
 80010b2:	f7ff bade 	b.w	8000672 <HAL_GPIO_TogglePin>
 80010b6:	bf00      	nop
 80010b8:	58020400 	.word	0x58020400

080010bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010bc:	b530      	push	{r4, r5, lr}
 80010be:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c0:	224c      	movs	r2, #76	; 0x4c
 80010c2:	2100      	movs	r1, #0
 80010c4:	a809      	add	r0, sp, #36	; 0x24
 80010c6:	f000 f919 	bl	80012fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010ca:	2220      	movs	r2, #32
 80010cc:	2100      	movs	r1, #0
 80010ce:	a801      	add	r0, sp, #4
 80010d0:	f000 f914 	bl	80012fc <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010d4:	2002      	movs	r0, #2
 80010d6:	f7ff fad3 	bl	8000680 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010da:	2300      	movs	r3, #0
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <SystemClock_Config+0xa4>)
 80010e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80010e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	9300      	str	r3, [sp, #0]
 80010f0:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <SystemClock_Config+0xa8>)
 80010f2:	699a      	ldr	r2, [r3, #24]
 80010f4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80010f8:	619a      	str	r2, [r3, #24]
 80010fa:	699a      	ldr	r2, [r3, #24]
 80010fc:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001104:	699a      	ldr	r2, [r3, #24]
 8001106:	0492      	lsls	r2, r2, #18
 8001108:	d5fc      	bpl.n	8001104 <SystemClock_Config+0x48>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110a:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 800110c:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL.PLLN = 480;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800110e:	2500      	movs	r5, #0
  RCC_OscInitStruct.PLL.PLLN = 480;
 8001110:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001114:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001116:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111a:	a809      	add	r0, sp, #36	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 480;
 800111c:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800111e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001120:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001122:	9414      	str	r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001124:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001126:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001128:	9316      	str	r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = 2;
 800112a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800112c:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800112e:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001130:	951a      	str	r5, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001132:	951b      	str	r5, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f7ff faca 	bl	80006cc <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001138:	233f      	movs	r3, #63	; 0x3f
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800113a:	4621      	mov	r1, r4
 800113c:	eb0d 0004 	add.w	r0, sp, r4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001140:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001142:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001144:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001146:	9507      	str	r5, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800114a:	2308      	movs	r3, #8
 800114c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800114e:	2340      	movs	r3, #64	; 0x40
 8001150:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001152:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001154:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001156:	f7ff fdad 	bl	8000cb4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800115a:	b01d      	add	sp, #116	; 0x74
 800115c:	bd30      	pop	{r4, r5, pc}
 800115e:	bf00      	nop
 8001160:	58000400 	.word	0x58000400
 8001164:	58024800 	.word	0x58024800

08001168 <main>:
{
 8001168:	b508      	push	{r3, lr}
 800116a:	f3bf 8f4f 	dsb	sy
 800116e:	f3bf 8f6f 	isb	sy
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <main+0x44>)
 8001174:	2200      	movs	r2, #0
 8001176:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 800117a:	f3bf 8f4f 	dsb	sy
 800117e:	f3bf 8f6f 	isb	sy
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001188:	615a      	str	r2, [r3, #20]
 800118a:	f3bf 8f4f 	dsb	sy
 800118e:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8001192:	f7ff f8c7 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 8001196:	f7ff ff91 	bl	80010bc <SystemClock_Config>
  MX_GPIO_Init();
 800119a:	f7ff fea7 	bl	8000eec <MX_GPIO_Init>
    ToggleLED();
 800119e:	f7ff ff85 	bl	80010ac <ToggleLED>
    HAL_Delay(500);
 80011a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011a6:	f7ff f8fd 	bl	80003a4 <HAL_Delay>
 80011aa:	e7f8      	b.n	800119e <main+0x36>
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <HAL_MspInit+0x20>)
{
 80011b2:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80011b8:	f042 0202 	orr.w	r2, r2, #2
 80011bc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80011c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011cc:	b002      	add	sp, #8
 80011ce:	4770      	bx	lr
 80011d0:	58024400 	.word	0x58024400

080011d4 <NMI_Handler>:
 80011d4:	4770      	bx	lr

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	e7fe      	b.n	80011d8 <MemManage_Handler>

080011da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011da:	e7fe      	b.n	80011da <BusFault_Handler>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	e7fe      	b.n	80011dc <UsageFault_Handler>

080011de <SVC_Handler>:
 80011de:	4770      	bx	lr

080011e0 <DebugMon_Handler>:
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	4770      	bx	lr

080011e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f7ff b8cc 	b.w	8000380 <HAL_IncTick>

080011e8 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e8:	4918      	ldr	r1, [pc, #96]	; (800124c <SystemInit+0x64>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011ea:	4819      	ldr	r0, [pc, #100]	; (8001250 <SystemInit+0x68>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 80011f4:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <SystemInit+0x6c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	f042 0201 	orr.w	r2, r2, #1
 8001202:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8001208:	681c      	ldr	r4, [r3, #0]
 800120a:	4020      	ands	r0, r4
 800120c:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800120e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001210:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001212:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001214:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001218:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800121a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800121c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001220:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001222:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800122a:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800122c:	661a      	str	r2, [r3, #96]	; 0x60
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <SystemInit+0x70>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	0c1b      	lsrs	r3, r3, #16
 8001234:	041b      	lsls	r3, r3, #16
 8001236:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800123a:	d202      	bcs.n	8001242 <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800123c:	2201      	movs	r2, #1
 800123e:	4b07      	ldr	r3, [pc, #28]	; (800125c <SystemInit+0x74>)
 8001240:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001242:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001246:	608b      	str	r3, [r1, #8]
 8001248:	bd10      	pop	{r4, pc}
 800124a:	bf00      	nop
 800124c:	e000ed00 	.word	0xe000ed00
 8001250:	eaf6ed7f 	.word	0xeaf6ed7f
 8001254:	58024400 	.word	0x58024400
 8001258:	5c001000 	.word	0x5c001000
 800125c:	51008108 	.word	0x51008108

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001264:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001266:	e003      	b.n	8001270 <LoopCopyDataInit>

08001268 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800126a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800126c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800126e:	3104      	adds	r1, #4

08001270 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001274:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001276:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001278:	d3f6      	bcc.n	8001268 <CopyDataInit>
  ldr  r2, =_sbss
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800127c:	e002      	b.n	8001284 <LoopFillZerobss>

0800127e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800127e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001280:	f842 3b04 	str.w	r3, [r2], #4

08001284 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001286:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001288:	d3f9      	bcc.n	800127e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800128a:	f7ff ffad 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128e:	f000 f811 	bl	80012b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff ff69 	bl	8001168 <main>
  bx  lr    
 8001296:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800129c:	0800133c 	.word	0x0800133c
  ldr  r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012a4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80012a8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80012ac:	20000030 	.word	0x20000030

080012b0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC3_IRQHandler>
	...

080012b4 <__libc_init_array>:
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	4e0d      	ldr	r6, [pc, #52]	; (80012ec <__libc_init_array+0x38>)
 80012b8:	4c0d      	ldr	r4, [pc, #52]	; (80012f0 <__libc_init_array+0x3c>)
 80012ba:	1ba4      	subs	r4, r4, r6
 80012bc:	10a4      	asrs	r4, r4, #2
 80012be:	2500      	movs	r5, #0
 80012c0:	42a5      	cmp	r5, r4
 80012c2:	d109      	bne.n	80012d8 <__libc_init_array+0x24>
 80012c4:	4e0b      	ldr	r6, [pc, #44]	; (80012f4 <__libc_init_array+0x40>)
 80012c6:	4c0c      	ldr	r4, [pc, #48]	; (80012f8 <__libc_init_array+0x44>)
 80012c8:	f000 f820 	bl	800130c <_init>
 80012cc:	1ba4      	subs	r4, r4, r6
 80012ce:	10a4      	asrs	r4, r4, #2
 80012d0:	2500      	movs	r5, #0
 80012d2:	42a5      	cmp	r5, r4
 80012d4:	d105      	bne.n	80012e2 <__libc_init_array+0x2e>
 80012d6:	bd70      	pop	{r4, r5, r6, pc}
 80012d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012dc:	4798      	blx	r3
 80012de:	3501      	adds	r5, #1
 80012e0:	e7ee      	b.n	80012c0 <__libc_init_array+0xc>
 80012e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012e6:	4798      	blx	r3
 80012e8:	3501      	adds	r5, #1
 80012ea:	e7f2      	b.n	80012d2 <__libc_init_array+0x1e>
 80012ec:	08001334 	.word	0x08001334
 80012f0:	08001334 	.word	0x08001334
 80012f4:	08001334 	.word	0x08001334
 80012f8:	08001338 	.word	0x08001338

080012fc <memset>:
 80012fc:	4402      	add	r2, r0
 80012fe:	4603      	mov	r3, r0
 8001300:	4293      	cmp	r3, r2
 8001302:	d100      	bne.n	8001306 <memset+0xa>
 8001304:	4770      	bx	lr
 8001306:	f803 1b01 	strb.w	r1, [r3], #1
 800130a:	e7f9      	b.n	8001300 <memset+0x4>

0800130c <_init>:
 800130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130e:	bf00      	nop
 8001310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001312:	bc08      	pop	{r3}
 8001314:	469e      	mov	lr, r3
 8001316:	4770      	bx	lr

08001318 <_fini>:
 8001318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800131a:	bf00      	nop
 800131c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800131e:	bc08      	pop	{r3}
 8001320:	469e      	mov	lr, r3
 8001322:	4770      	bx	lr
